/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../providers/providers.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/enums/exchange_rate_type_enum.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../widgets/rounded_white_container.dart';
import '../step_scaffold.dart';
import 'desktop_step_item.dart';

class DesktopStep3 extends ConsumerStatefulWidget {
  const DesktopStep3({
    super.key,
  });

  @override
  ConsumerState<DesktopStep3> createState() => _DesktopStep3State();
}

class _DesktopStep3State extends ConsumerState<DesktopStep3> {
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text(
          "Confirm exchange details",
          style: STextStyles.desktopTextMedium(context),
        ),
        const SizedBox(
          height: 20,
        ),
        RoundedWhiteContainer(
          borderColor: Theme.of(context).extension<StackColors>()!.background,
          padding: const EdgeInsets.all(0),
          child: Column(
            children: [
              DesktopStepItem(
                label: "Swap",
                value: ref.watch(efExchangeProviderNameProvider),
              ),
              Container(
                height: 1,
                color: Theme.of(context).extension<StackColors>()!.background,
              ),
              DesktopStepItem(
                label: "You send",
                value:
                    "${ref.watch(desktopExchangeModelProvider.select((value) => value!.sendAmount.toStringAsFixed(8)))} ${ref.watch(desktopExchangeModelProvider.select((value) => value!.sendTicker.toUpperCase()))}",
              ),
              Container(
                height: 1,
                color: Theme.of(context).extension<StackColors>()!.background,
              ),
              DesktopStepItem(
                label: "You receive",
                value:
                    "~${ref.watch(desktopExchangeModelProvider.select((value) => value!.receiveAmount.toStringAsFixed(8)))} ${ref.watch(desktopExchangeModelProvider.select((value) => value!.receiveTicker.toUpperCase()))}",
              ),
              Container(
                height: 1,
                color: Theme.of(context).extension<StackColors>()!.background,
              ),
              DesktopStepItem(
                label: ref.watch(
                          desktopExchangeModelProvider
                              .select((value) => value!.rateType),
                        ) ==
                        ExchangeRateType.estimated
                    ? "Estimated rate"
                    : "Fixed rate",
                value: ref.watch(
                  desktopExchangeModelProvider
                      .select((value) => value!.rateInfo),
                ),
              ),
              Container(
                height: 1,
                color: Theme.of(context).extension<StackColors>()!.background,
              ),
              DesktopStepItem(
                vertical: true,
                label:
                    "Recipient ${ref.watch(desktopExchangeModelProvider.select((value) => value!.receiveTicker.toUpperCase()))} address",
                value: ref.watch(
                      desktopExchangeModelProvider
                          .select((value) => value!.recipientAddress),
                    ) ??
                    "Error",
              ),
              if (ref.watch(efExchangeProvider).supportsRefundAddress)
                Container(
                  height: 1,
                  color: Theme.of(context).extension<StackColors>()!.background,
                ),
              if (ref.watch(efExchangeProvider).supportsRefundAddress)
                DesktopStepItem(
                  vertical: true,
                  label:
                      "Refund ${ref.watch(desktopExchangeModelProvider.select((value) => value!.sendTicker.toUpperCase()))} address",
                  value: ref.watch(
                        desktopExchangeModelProvider
                            .select((value) => value!.refundAddress),
                      ) ??
                      "Error",
                ),
            ],
          ),
        ),
      ],
    );
  }
}
